---
name: Build and Test

on:
  push:
    branches: ["main", "develop"]
  pull_request:
    branches: ["main", "develop"]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '7.x'

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Install SonarScanner
        run: |
          dotnet tool install --global dotnet-sonarscanner
          echo "$HOME/.dotnet/tools" >> $GITHUB_PATH

      - name: SonarQube Begin
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: dotnet sonarscanner begin /k:"dotnet" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="http://${{ secrets.SONAR_HOST_URL }}"

      - name: Restore backend dependencies
        run: |
          dotnet restore ./api/Basic3TierAPI/Basic3TierAPI.sln

      - name: Build API
        run: |
          dotnet build --no-restore ./api/Basic3TierAPI/Basic3TierAPI.sln

      - name: Test API
        run: |
          dotnet test --no-restore ./api/Basic3TierAPI/Basic3TierAPI.sln

      - name: SonarQube End
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: dotnet sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache SonarQube packages
        uses: actions/cache@v1
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Run analysis
        run: dotnet sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"

      - name: Add EC2 to known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: Build API Image
        run: docker build -t ${{ secrets.DOCKER_USER }}/basic3tier-api:latest ./api

      - name: Build UI Image
        run: docker build -t ${{ secrets.DOCKER_USER }}/basic3tier-ui:latest ./ui

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push API Image
        run: docker push ${{ secrets.DOCKER_USER }}/basic3tier-api:latest

      - name: Push UI Image
        run: docker push ${{ secrets.DOCKER_USER }}/basic3tier-ui:latest

      - name: Copy Docker Compose File
        env:
          EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ${{ secrets.EC2_USER }}
        run: |
          echo "$EC2_SSH_KEY" > /tmp/ec2_ssh_key.pem
          chmod 600 /tmp/ec2_ssh_key.pem
          ssh -i /tmp/ec2_ssh_key.pem $EC2_USER@$EC2_HOST "mkdir -p /home/$EC2_USER/tawfeeq"
          scp -r -i /tmp/ec2_ssh_key.pem docker-compose.yml $EC2_USER@$EC2_HOST:/home/$EC2_USER/tawfeeq/

      - name: SSH into EC2 and Deploy
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ${{ secrets.EC2_USER }}
        run: |
           echo "$EC2_SSH_KEY" > /tmp/ec2_ssh_key.pem
           chmod 600 /tmp/ec2_ssh_key.pem
           ssh -i /tmp/ec2_ssh_key.pem $EC2_USER@$EC2_HOST << 'EOF'
              cd /home/$EC2_USER/tawfeeq
              docker-compose pull
              docker-compose down
              docker-compose up -d
            EOF
